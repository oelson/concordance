#!/usr/bin/env python3
#-*- coding: utf-8 -*-
# 
# clibi (command line interface bible index): outil de recherche dans les textes
# bibliques via la ligne de commande.
#
# Copyright 2013 Houillon Nelson <houillon.nelson@gmail.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA 02110-1301, USA.

import argparse
import json
import os
import signal
import sys

from BibleParser.xml import XMLBibleParser

"""
Options de la ligne de commande.
"""
arg_parser = argparse.ArgumentParser(
    description="Outil de recherche dans les textes bibliques"
)

# arguments vitaux
arg_parser.add_argument("-t", "--bible-translation",
    dest="translation",
    help="Traduction de la bible à utiliser (nom du fichier XML sans préfixe ni suffixe - voir la variable d'environnement BIBLE_XML_PATH)"
)
arg_parser.add_argument("-T", "--bible-xml-file",
    dest="xml",
    help="Chemin complet vers le fichier XML à utiliser"
)
# arguments de traitement
arg_parser.add_argument("-b", "--word-boundary",
    dest="word_boundary",
    action="store_true",
    help="Recherche des mots entiers"
)
arg_parser.add_argument("-i", "--case-sensitive",
    dest="case_sensitive",
    action="store_true",
    type=bool,
    default=False,
    help="Active la sensibilité à la case"
)
arg_parser.add_argument("-x", "--accent-sensitive",
    dest="accent_sensitive",
    action="store_true",
    type=bool,
    default=False,
    help="Active la sensibilité aux accents"
)
# Mots-clés ou assimilés
arg_parser.add_argument("-N", "--number",
    dest="search_number",
    type=int,
    nargs="*",
    help="Une suite de nombres entiers à rechercher"
)
arg_parser.add_argument("-r", "--numeric-range",
    dest="search_range",
    nargs="?",
    help="Un intervalle de nombres entiers à rechercher"
)
arg_parser.add_argument("-a", "--all-keywords",
    dest="search_all_keywords",
    narg="?",
    help="Une liste de mots à trouver tous ensembles"
)
arg_parser.add_argument("-o", "--one-keyword",
    dest="search_one_keywords",
    nargs="*",
    help="Une liste de mots dont un seul doit-être trouvé"
)
arg_parser.add_argument("-n", "--none-keyword",
    dest="search_none_keywords",
    nargs="?",
    help="Une liste de mots interdits"
)
arg_parser.add_argument("-e", "--excact-expr",
    dest="search_exact_expression",
    nargs="*",
    help="Une expression exacte à rechercher"
)

args = arg_parser.parse_args()

print(args)
sys.exit(0)

"""
Constantes du script.
"""

# Nombre de versets à sélectionner autours d'une référence lors d'un
# élargissement
context_size = 5

"""
Obtention de la liste des fichier XML disponnibles.
"""
bible_xml_directory = os.environ.get("BIBLE_XML_DIRECTORY")

if not bible_xml_directory:
    print("env variable 'BIBLE_XML_DIRECTORY' must be set", file=sys.stderr)
    sys.exit(1)

# Liste les traductions de la bible existantes à partir du disque
os.chdir(bible_xml_directory)
for files in os.listdir("."):
    if files.endswith(".xml"):
        bible_translations.append(files[:-4])

"""
Instanciation du parseur XML.
"""

xml_path = "{}/{}.xml".format(
    bible_xml_directory,
    translation
)

with open(xml_path, 'r') as xml_file:
    parser = XMLBibleParser(xml_file.read())

"""
Passage des arguments au parseur.
"""

# correspondance avec des mots-entiers
if "bou" in opt:
    parser.set_word_boundary(opt["bou"])
# sensibilité à la case
if "cas" in opt:
    parser.set_case_sensitivity(opt["cas"])
# sensibilité aux accents
if "acc" in opt:
    parser.set_accent_sensitivity(opt["acc"])
# ajoute les références
for r in opt["ref"]:
    parser.add_reference(r)
# recherche tous les mots suivants
if "all" in opt:
    parser.add_mandatory_keywords(opt["all"])
# recherche au moins un des mots suivants
if "one" in opt:
    parser.add_one_of_keywords(opt["one"])
# évite tous les mots suivants
if "non" in opt:
    parser.add_none_of_keywords(opt["non"])
# expression exacte
if "exp" in opt:
    parser.add_exact_expression(opt["exp"])
# recherche un nombre compris dans un intervalle
if "ran" in opt:
    if "l" in opt["ran"]:
        if "h" in opt["ran"]:
            parser.add_number_in_range(
                int(opt["ran"]["l"]),
                int(opt["ran"]["h"])
            )
        else:
            parser.add_number_in_range(
                int(opt["ran"]["l"])
            )
# préfixe les résultats par des tirets
parser.enable_highlighting("_")

for reference, verse in parser:
    print("{}:\t{}".format(reference, verse))
